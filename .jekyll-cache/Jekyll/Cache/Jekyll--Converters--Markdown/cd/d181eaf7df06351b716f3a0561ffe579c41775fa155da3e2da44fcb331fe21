I"+<h3 id="访问控制access-control">访问控制(Access Control)</h3>

<ul>
  <li>在访问权限控制这块，Swift提供了5个不同的访问级别(以下是从高到低排列， 实体指被访问级别修饰的内容)
    <ul>
      <li><code class="language-plaintext highlighter-rouge">open</code>:允许在定义实体的模块、其他模块中访问，允许其他模块进行继承、重写(<code class="language-plaintext highlighter-rouge">open</code>只能用在类、类成员上)</li>
      <li><code class="language-plaintext highlighter-rouge">public</code>:允许在定义实体的模块、其他模块中访问，不允许其他模块进行继承、重写</li>
      <li><code class="language-plaintext highlighter-rouge">internal</code>:只允许在定义实体的模块中访问，不允许在其他模块中访问</li>
      <li><code class="language-plaintext highlighter-rouge">fileprivate</code>:只允许在定义实体的源文件中访问</li>
      <li><code class="language-plaintext highlighter-rouge">private</code>:只允许在定义实体的封闭声明中访问</li>
    </ul>
  </li>
  <li>绝大部分实体默认都是<code class="language-plaintext highlighter-rouge">internal</code> 级别</li>
</ul>

<hr />

<h3 id="访问级别的使用准则">访问级别的使用准则</h3>

<ul>
  <li>一个实体不可以被更低访问级别的实体定义，比如
    <ul>
      <li>变量\常量类型 ≥ 变量\常量</li>
      <li>参数类型、返回值类型 ≥ 函数</li>
      <li>父类 ≥ 子类</li>
      <li>父协议 ≥ 子协议</li>
      <li>原类型 ≥ typealias</li>
      <li>原始值类型、关联值类型 ≥ 枚举类型</li>
      <li>定义类型A时用到的其他类型 ≥ 类型A</li>
      <li>……</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="元组类型">元组类型</h3>

<ul>
  <li>元组类型的访问级别是所有成员类型最低的那个</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>internal struct Dog {}
fileprivate class Person {}
// (Dog, Person)的访问级别是fileprivate
fileprivate var data1: (Dog, Person)
private var data2: (Dog, Person)
</code></pre></div></div>

<hr />

<h3 id="泛型类型">泛型类型</h3>

<ul>
  <li>泛型类型的访问级别是 <strong>类型的访问级别</strong> 以及 <strong>所有泛型类型参数的访问级别</strong> 中最低的那个</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>internal class Car {}
fileprivate class Dog {}
public class Person&lt;T1, T2&gt; {}
// Person&lt;Car, Dog&gt;的访问级别是fileprivate
fileprivate var p = Person&lt;Car, Dog&gt;()
</code></pre></div></div>

<hr />

<h3 id="成员嵌套类型">成员、嵌套类型</h3>

<ul>
  <li>类型的访问级别会影响成员(属性、方法、初始化器、下标)、嵌套类型的默认访问级别
    <ul>
      <li>一般情况下，类型为<code class="language-plaintext highlighter-rouge">private</code>或<code class="language-plaintext highlighter-rouge">fileprivate</code>，那么成员\嵌套类型默认也是<code class="language-plaintext highlighter-rouge">private</code>或<code class="language-plaintext highlighter-rouge">fileprivate</code></li>
      <li>一般情况下，类型为<code class="language-plaintext highlighter-rouge">internal</code>或<code class="language-plaintext highlighter-rouge">public</code>，那么成员\嵌套类型默认是<code class="language-plaintext highlighter-rouge">internal</code></li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class PublicClass {
    public var p1 = 0 // public
    var p2 = 0 // internal
    fileprivate func f1() {} // fileprivate
    private func f2() {} // private
}

class InternalClass { // internal
    var p = 0 // internal
    fileprivate func f1() {} // fileprivate
    private func f2() {} // private
}

fileprivate class FilePrivateClass { // fileprivate
    func f1() {} // fileprivate
    private func f2() {} // private
}

private class PrivateClass { // private
    func f() {} // private
}
</code></pre></div></div>

<hr />

<h3 id="成员的重写">成员的重写</h3>

<ul>
  <li>子类重写成员的访问级别必须 ≥ 子类的访问级别，或者 ≥ 父类被重写成员的访问级别</li>
  <li>父类的成员不能被成员作用域外定义的子类重写</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Person {
    private var age: Int = 0
}
public class Student : Person {
    //报错 ：Property does not override any property from its superclass
        override var age: Int {
            set {}
            get {10}
    }
}


public class Person {
    private var age: Int = 0
    public class Student : Person {
        override var age: Int {
            set {}
            get {10} }
    }
}
</code></pre></div></div>

<hr />

<h3 id="下面代码能否编译通过">下面代码能否编译通过?</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>private class Person {}
fileprivate class Student : Person {}

private struct Dog {
    var age: Int = 0
    func run() {}
}

fileprivate struct Person {
    var dog: Dog = Dog()
    mutating func walk() {
        dog.run()
        dog.age = 1
    }
}

private struct Dog {
    private var age: Int = 0
    private func run() {}
}

fileprivate struct Person {
    var dog: Dog = Dog()
    mutating func walk() {
        dog.run()
        dog.age = 1
    }
}
</code></pre></div></div>

<ul>
  <li>直接在全局作用域下定义的private等价于fileprivate</li>
</ul>

<hr />

<h3 id="gettersetter">getter、setter</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">getter</code>、<code class="language-plaintext highlighter-rouge">setter</code>默认自动接收它们所属环境的访问级别</li>
  <li>可以给<code class="language-plaintext highlighter-rouge">setter</code>单独设置一个比<code class="language-plaintext highlighter-rouge">getter</code>更低的访问级别，用以限制写的权限</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fileprivate(set) public var num = 10
class Person {
    private(set) var age = 0
    fileprivate(set) public var weight: Int {
        set {}
        get { 10 }
    }
    internal(set) public subscript(index: Int) -&gt; Int {
        set {}
        get { index }
    }
}
</code></pre></div></div>

<hr />

<h3 id="初始化器">初始化器</h3>

<ul>
  <li>如果一个<code class="language-plaintext highlighter-rouge">public类</code>想在另一个模块调用编译生成的默认无参初始化器，必须显式提供<code class="language-plaintext highlighter-rouge">public</code>的无参初始化器
    <ul>
      <li>因为<code class="language-plaintext highlighter-rouge">public类</code>的默认初始化器是<code class="language-plaintext highlighter-rouge">internal</code>级别</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">required</code>初始化器 ≥ 它的默认访问级别</li>
  <li>如果结构体有<code class="language-plaintext highlighter-rouge">private</code>、<code class="language-plaintext highlighter-rouge">fileprivate</code>的存储实例属性，那么它的<strong>成员</strong>初始化器也是<code class="language-plaintext highlighter-rouge">private</code>、<code class="language-plaintext highlighter-rouge">fileprivate</code></li>
  <li>否则默认就是<code class="language-plaintext highlighter-rouge">internal</code></li>
</ul>

<hr />

<h3 id="枚举类型的case">枚举类型的case</h3>

<ul>
  <li>不能给<code class="language-plaintext highlighter-rouge">enum</code>的每个<code class="language-plaintext highlighter-rouge">case</code>单独设置访问级别</li>
  <li>每个<code class="language-plaintext highlighter-rouge">case</code>自动接收<code class="language-plaintext highlighter-rouge">enum</code>的访问级别</li>
  <li><code class="language-plaintext highlighter-rouge">public enum</code>定义的<code class="language-plaintext highlighter-rouge">case</code>也是<code class="language-plaintext highlighter-rouge">public</code></li>
</ul>

<hr />

<h3 id="协议">协议</h3>

<ul>
  <li>协议中定义的要求自动接收协议的访问级别，不能单独设置访问级别</li>
  <li><code class="language-plaintext highlighter-rouge">public</code>协议定义的要求也是<code class="language-plaintext highlighter-rouge">public</code></li>
  <li>协议实现的访问级别必须 ≥ 类型的访问级别，或者 ≥ 协议的访问级别</li>
  <li>下面代码能编译通过么?</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public protocol Runnable {
    func run()
}

public class Person : Runnable {
    func run() {}
}
</code></pre></div></div>

<hr />

<h3 id="扩展">扩展</h3>

<ul>
  <li>如果有显式设置扩展的访问级别，扩展添加的成员自动接收扩展的访问级别</li>
  <li>如果没有显式设置扩展的访问级别，扩展添加的成员的默认访问级别，跟直接在类型中定义的成员一样</li>
  <li>可以单独给扩展添加的成员设置访问级别</li>
  <li>不能给用于遵守协议的扩展显式设置扩展的访问级别</li>
  <li>在同一文件中的扩展，可以写成类似多个部分的类型声明
    <ul>
      <li>在原本的声明中声明一个私有成员，可以在同一文件的扩展中访问它</li>
      <li>在扩展中声明一个私有成员，可以在同一文件的其他扩展中、原本声明中访问它</li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Person {
    private func run0() {}
    private func eat0() {
        run1()
    }
}

extension Person {
    private func run1() {}
    private func eat1() {
        run0()
    }
}

extension Person {
    private func eat2() {
        run1()
    }
}
</code></pre></div></div>

<hr />

<h3 id="将方法赋值给varlet">将方法赋值给var\let</h3>

<ul>
  <li>方法也可以像函数那样，赋值给一个<code class="language-plaintext highlighter-rouge">let</code>或者<code class="language-plaintext highlighter-rouge">var</code></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct Person {
    var age: Int
    func run(_ v: Int) { print("func run", age, v) }
    static func run(_ v: Int) { print("static func run", v) }
}

let fn1 = Person.run
fn1(10) // static func run 10

let fn2: (Int) -&gt; () = Person.run
fn2(20) // static func run 20

let fn3: (Person) -&gt; ((Int) -&gt; ()) = Person.run
fn3(Person(age: 18))(30) // func run 18 30
</code></pre></div></div>

:ET