I"d<p>Go语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有数组、切片、结构体、函数、map、通道（channel）等。Go 语言的基本类型和其他语言大同小异。</p>

<h1 id="基本数据类型">基本数据类型</h1>

<h2 id="整型">整型</h2>

<p>整型分为以下两个大类： 按长度分为：int8、int16、int32、int64 对应的无符号整型：uint8、uint16、uint32、uint64</p>

<p>其中，<code class="language-plaintext highlighter-rouge">uint8</code>就是我们熟知的<code class="language-plaintext highlighter-rouge">byte</code>型，<code class="language-plaintext highlighter-rouge">int16</code>对应C语言中的<code class="language-plaintext highlighter-rouge">short</code>型，<code class="language-plaintext highlighter-rouge">int64</code>对应C语言中的<code class="language-plaintext highlighter-rouge">long</code>型。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">类型</th>
      <th style="text-align: center">描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">uint8</td>
      <td style="text-align: center">无符号 8位整型 (0 到 255)</td>
    </tr>
    <tr>
      <td style="text-align: center">uint16</td>
      <td style="text-align: center">无符号 16位整型 (0 到 65535)</td>
    </tr>
    <tr>
      <td style="text-align: center">uint32</td>
      <td style="text-align: center">无符号 32位整型 (0 到 4294967295)</td>
    </tr>
    <tr>
      <td style="text-align: center">uint64</td>
      <td style="text-align: center">无符号 64位整型 (0 到 18446744073709551615)</td>
    </tr>
    <tr>
      <td style="text-align: center">int8</td>
      <td style="text-align: center">有符号 8位整型 (-128 到 127)</td>
    </tr>
    <tr>
      <td style="text-align: center">int16</td>
      <td style="text-align: center">有符号 16位整型 (-32768 到 32767)</td>
    </tr>
    <tr>
      <td style="text-align: center">int32</td>
      <td style="text-align: center">有符号 32位整型 (-2147483648 到 2147483647)</td>
    </tr>
    <tr>
      <td style="text-align: center">int64</td>
      <td style="text-align: center">有符号 64位整型 (-9223372036854775808 到 9223372036854775807)</td>
    </tr>
  </tbody>
</table>

<h3 id="特殊整型">特殊整型</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">类型</th>
      <th style="text-align: center">描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">uint</td>
      <td style="text-align: center">32位操作系统上就是<code class="language-plaintext highlighter-rouge">uint32</code>，64位操作系统上就是<code class="language-plaintext highlighter-rouge">uint64</code></td>
    </tr>
    <tr>
      <td style="text-align: center">int</td>
      <td style="text-align: center">32位操作系统上就是<code class="language-plaintext highlighter-rouge">int32</code>，64位操作系统上就是<code class="language-plaintext highlighter-rouge">int64</code></td>
    </tr>
    <tr>
      <td style="text-align: center">uintptr</td>
      <td style="text-align: center">无符号整型，用于存放一个指针</td>
    </tr>
  </tbody>
</table>

<p><strong>注意：</strong> 在使用<code class="language-plaintext highlighter-rouge">int</code>和 <code class="language-plaintext highlighter-rouge">uint</code>类型时，不能假定它是32位或64位的整型，而是考虑<code class="language-plaintext highlighter-rouge">int</code>和<code class="language-plaintext highlighter-rouge">uint</code>可能在不同平台上的差异。</p>

<p><strong>注意事项</strong> 获取对象的长度的内建<code class="language-plaintext highlighter-rouge">len()</code>函数返回的长度可以根据不同平台的字节长度进行变化。实际使用中，切片或 map 的元素数量等都可以用<code class="language-plaintext highlighter-rouge">int</code>来表示。在涉及到二进制传输、读写文件的结构描述时，为了保持文件的结构不会受到不同编译目标平台字节长度的影响，不要使用<code class="language-plaintext highlighter-rouge">int</code>和 <code class="language-plaintext highlighter-rouge">uint</code>。</p>

<h3 id="数字字面量语法number-literals-syntax">数字字面量语法（Number literals syntax）</h3>

<p>Go1.13版本之后引入了数字字面量语法，这样便于开发者以二进制、八进制或十六进制浮点数的格式定义数字，例如：</p>

<p><code class="language-plaintext highlighter-rouge">v := 0b00101101</code>， 代表二进制的 101101，相当于十进制的 45。 <code class="language-plaintext highlighter-rouge">v := 0o377</code>，代表八进制的 377，相当于十进制的 255。 <code class="language-plaintext highlighter-rouge">v := 0x1p-2</code>，代表十六进制的 1 除以 2²，也就是 0.25。</p>

<p>而且还允许我们用 <code class="language-plaintext highlighter-rouge">_</code> 来分隔数字，比如说： <code class="language-plaintext highlighter-rouge">v := 123_456</code> 表示 v 的值等于 123456。</p>

<p>我们可以借助fmt函数来将一个整数以不同进制形式展示。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>
 
<span class="k">import</span> <span class="s">"fmt"</span>
 
<span class="k">func</span> <span class="n">main</span><span class="p">(){</span>
	<span class="c">// 十进制</span>
	<span class="k">var</span> <span class="n">a</span> <span class="kt">int</span> <span class="o">=</span> <span class="m">10</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%d </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>  <span class="c">// 10</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%b </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span>  <span class="c">// 1010  占位符%b表示二进制</span>
 
	<span class="c">// 八进制  以0开头</span>
	<span class="k">var</span> <span class="n">b</span> <span class="kt">int</span> <span class="o">=</span> <span class="m">077</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%o </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>  <span class="c">// 77</span>
 
	<span class="c">// 十六进制  以0x开头</span>
	<span class="k">var</span> <span class="n">c</span> <span class="kt">int</span> <span class="o">=</span> <span class="m">0xff</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%x </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>  <span class="c">// ff</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%X </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>  <span class="c">// FF</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="浮点型">浮点型</h2>

<p>Go语言支持两种浮点型数：<code class="language-plaintext highlighter-rouge">float32</code>和<code class="language-plaintext highlighter-rouge">float64</code>。这两种浮点型数据格式遵循<code class="language-plaintext highlighter-rouge">IEEE 754</code>标准： <code class="language-plaintext highlighter-rouge">float32</code> 的浮点数的最大范围约为 <code class="language-plaintext highlighter-rouge">3.4e38</code>，可以使用常量定义：<code class="language-plaintext highlighter-rouge">math.MaxFloat32</code>。 <code class="language-plaintext highlighter-rouge">float64</code> 的浮点数的最大范围约为 <code class="language-plaintext highlighter-rouge">1.8e308</code>，可以使用一个常量定义：<code class="language-plaintext highlighter-rouge">math.MaxFloat64</code>。</p>

<p>打印浮点数时，可以使用<code class="language-plaintext highlighter-rouge">fmt</code>包配合动词<code class="language-plaintext highlighter-rouge">%f</code>，代码如下：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>
<span class="k">import</span> <span class="p">(</span>
        <span class="s">"fmt"</span>
        <span class="s">"math"</span>
<span class="p">)</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">Pi</span><span class="p">)</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%.2f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">math</span><span class="o">.</span><span class="n">Pi</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="复数">复数</h2>

<p>complex64和complex128</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">c1</span> <span class="kt">complex64</span>
<span class="n">c1</span> <span class="o">=</span> <span class="m">1</span> <span class="o">+</span> <span class="m">2i</span>
<span class="k">var</span> <span class="n">c2</span> <span class="kt">complex128</span>
<span class="n">c2</span> <span class="o">=</span> <span class="m">2</span> <span class="o">+</span> <span class="m">3i</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">c1</span><span class="p">)</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span>
</code></pre></div></div>

<p>复数有实部和虚部，complex64的实部和虚部为32位，complex128的实部和虚部为64位。</p>

<h2 id="布尔值">布尔值</h2>

<p>Go语言中以<code class="language-plaintext highlighter-rouge">bool</code>类型进行声明布尔型数据，布尔型数据只有<code class="language-plaintext highlighter-rouge">true（真）</code>和<code class="language-plaintext highlighter-rouge">false（假）</code>两个值。</p>

<p><strong>注意：</strong></p>

<ol>
  <li>布尔类型变量的默认值为<code class="language-plaintext highlighter-rouge">false</code>。</li>
  <li>Go 语言中不允许将整型强制转换为布尔型.</li>
  <li>布尔型无法参与数值运算，也无法与其他类型进行转换。</li>
</ol>

<h2 id="字符串">字符串</h2>

<p>Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。 Go 语言里的字符串的内部实现使用<code class="language-plaintext highlighter-rouge">UTF-8</code>编码。 字符串的值为<code class="language-plaintext highlighter-rouge">双引号(")</code>中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s1</span> <span class="o">:=</span> <span class="s">"hello"</span>
<span class="n">s2</span> <span class="o">:=</span> <span class="s">"你好"</span>
</code></pre></div></div>

<h3 id="字符串转义符">字符串转义符</h3>

<p>Go 语言的字符串常见转义符包含回车、换行、单双引号、制表符等，如下表所示。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">转义符</th>
      <th style="text-align: center">含义</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">\r</code></td>
      <td style="text-align: center">回车符（返回行首）</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">\n</code></td>
      <td style="text-align: center">换行符（直接跳到下一行的同列位置）</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">\t</code></td>
      <td style="text-align: center">制表符</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">\'</code></td>
      <td style="text-align: center">单引号</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">\"</code></td>
      <td style="text-align: center">双引号</td>
    </tr>
    <tr>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">\\</code></td>
      <td style="text-align: center">反斜杠</td>
    </tr>
  </tbody>
</table>

<p>举个例子，我们要打印一个Windows平台下的一个文件路径：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>
<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"str := </span><span class="se">\"</span><span class="s">c:</span><span class="se">\\</span><span class="s">Code</span><span class="se">\\</span><span class="s">lesson1</span><span class="se">\\</span><span class="s">go.exe</span><span class="se">\"</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="多行字符串">多行字符串</h3>

<p>Go语言中要定义一个多行字符串时，就必须使用<code class="language-plaintext highlighter-rouge">反引号</code>字符：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s1</span> <span class="o">:=</span> <span class="s">`第一行
第二行
第三行
`</span>
<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>
</code></pre></div></div>

<p>反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。</p>

<h3 id="字符串的常用操作">字符串的常用操作</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: center">方法</th>
      <th style="text-align: center">介绍</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">len(str)</td>
      <td style="text-align: center">求长度</td>
    </tr>
    <tr>
      <td style="text-align: center">+或fmt.Sprintf</td>
      <td style="text-align: center">拼接字符串</td>
    </tr>
    <tr>
      <td style="text-align: center">strings.Split</td>
      <td style="text-align: center">分割</td>
    </tr>
    <tr>
      <td style="text-align: center">strings.contains</td>
      <td style="text-align: center">判断是否包含</td>
    </tr>
    <tr>
      <td style="text-align: center">strings.HasPrefix,strings.HasSuffix</td>
      <td style="text-align: center">前缀/后缀判断</td>
    </tr>
    <tr>
      <td style="text-align: center">strings.Index(),strings.LastIndex()</td>
      <td style="text-align: center">子串出现的位置</td>
    </tr>
    <tr>
      <td style="text-align: center">strings.Join(a[]string, sep string)</td>
      <td style="text-align: center">join操作</td>
    </tr>
  </tbody>
</table>

<h2 id="byte和rune类型">byte和rune类型</h2>

<p>组成每个字符串的元素叫做“字符”，可以通过遍历或者单个获取字符串元素获得字符。 字符用单引号（’）包裹起来，如：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="sc">'中'</span>
<span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="sc">'x'</span>
</code></pre></div></div>

<p>Go 语言的字符有以下两种：</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">uint8</code>类型，或者叫 byte 型，代表了<code class="language-plaintext highlighter-rouge">ASCII码</code>的一个字符。</li>
  <li><code class="language-plaintext highlighter-rouge">rune</code>类型，代表一个 <code class="language-plaintext highlighter-rouge">UTF-8字符</code>。</li>
</ol>

<p>当需要处理中文、日文或者其他复合字符时，则需要用到<code class="language-plaintext highlighter-rouge">rune</code>类型。<code class="language-plaintext highlighter-rouge">rune</code>类型实际是一个<code class="language-plaintext highlighter-rouge">int32</code>。</p>

<p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">// 遍历字符串</span>
<span class="k">func</span> <span class="n">traversalString</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">s</span> <span class="o">:=</span> <span class="s">"hello沙河"</span>
	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span> <span class="c">//byte</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%v(%c) "</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
	<span class="p">}</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">s</span> <span class="p">{</span> <span class="c">//rune</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"%v(%c) "</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>输出：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>104<span class="o">(</span>h<span class="o">)</span> 101<span class="o">(</span>e<span class="o">)</span> 108<span class="o">(</span>l<span class="o">)</span> 108<span class="o">(</span>l<span class="o">)</span> 111<span class="o">(</span>o<span class="o">)</span> 230<span class="o">(</span>æ<span class="o">)</span> 178<span class="o">(</span>²<span class="o">)</span> 153<span class="o">()</span> 230<span class="o">(</span>æ<span class="o">)</span> 178<span class="o">(</span>²<span class="o">)</span> 179<span class="o">(</span>³<span class="o">)</span> 
104<span class="o">(</span>h<span class="o">)</span> 101<span class="o">(</span>e<span class="o">)</span> 108<span class="o">(</span>l<span class="o">)</span> 108<span class="o">(</span>l<span class="o">)</span> 111<span class="o">(</span>o<span class="o">)</span> 27801<span class="o">(</span>沙<span class="o">)</span> 27827<span class="o">(</span>河<span class="o">)</span> 
</code></pre></div></div>

<p>因为UTF8编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串，否则就会出现上面输出中第一行的结果。</p>

<p>字符串底层是一个byte数组，所以可以和<code class="language-plaintext highlighter-rouge">[]byte</code>类型相互转换。字符串是不能修改的 字符串是由byte字节组成，所以字符串的长度是byte字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</p>

<h3 id="修改字符串">修改字符串</h3>

<p>要修改字符串，需要先将其转换成<code class="language-plaintext highlighter-rouge">[]rune</code>或<code class="language-plaintext highlighter-rouge">[]byte</code>，完成后再转换为<code class="language-plaintext highlighter-rouge">string</code>。无论哪种转换，都会重新分配内存，并复制字节数组。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">changeString</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">s1</span> <span class="o">:=</span> <span class="s">"big"</span>
	<span class="c">// 强制类型转换</span>
	<span class="n">byteS1</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>
	<span class="n">byteS1</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'p'</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">byteS1</span><span class="p">))</span>

	<span class="n">s2</span> <span class="o">:=</span> <span class="s">"白萝卜"</span>
	<span class="n">runeS2</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">rune</span><span class="p">(</span><span class="n">s2</span><span class="p">)</span>
	<span class="n">runeS2</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'红'</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="kt">string</span><span class="p">(</span><span class="n">runeS2</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="类型转换">类型转换</h2>

<p>Go语言中只有强制类型转换，没有隐式类型转换。该语法只能在两个类型之间支持相互转换的时候使用。</p>

<p>强制类型转换的基本语法如下：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>T<span class="o">(</span>表达式<span class="o">)</span>
</code></pre></div></div>

<p>其中，T表示要转换的类型。表达式包括变量、复杂算子和函数返回值等.</p>

<p>比如计算直角三角形的斜边长时使用math包的Sqrt()函数，该函数接收的是float64类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为float64类型。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">sqrtDemo</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span>
	<span class="k">var</span> <span class="n">c</span> <span class="kt">int</span>
	<span class="c">// math.Sqrt()接收的参数是float64类型，需要强制转换</span>
	<span class="n">c</span> <span class="o">=</span> <span class="kt">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Sqrt</span><span class="p">(</span><span class="kt">float64</span><span class="p">(</span><span class="n">a</span><span class="o">*</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">b</span><span class="p">)))</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
:ET